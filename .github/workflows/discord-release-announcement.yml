name: Discord announcement on release

on:
  release:
    types: [published]

jobs:
  discord_announcement:
    runs-on: ubuntu-latest

    steps:
      - name: Send Discord message
        shell: bash
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_ANNOUNCEMENTS_WEBHOOK_URL }}
          RELEASE_NAME: ${{ github.event.release.name }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          RELEASE_URL: ${{ github.event.release.html_url }}
          RELEASE_BODY: ${{ github.event.release.body }}
        run: |
          wrap_markdown_urls_only() {
            local text="$1"
            echo "$text" | perl -pe '
              s{
                (\[[^\[\]]*\])    # match [text]
                \(               # literal (
                (https?://[^\)]+) # URL inside parentheses
                \)               # literal )
              }{$1."("."<".$2.">".")"}eg;
            '
          }

          MESSAGE=$(printf "%s\n" \
            "# New MicroPython WalterModem release: $RELEASE_NAME" \
            "- **TAG:** $RELEASE_TAG" \
            "- **URL:** $RELEASE_URL" \
            "" \
            "---" \
            "$RELEASE_BODY"
          )

          # Wrap URLs inside markdown links with <> to prevent discord auto-embed
          MESSAGE=$(wrap_markdown_urls_only "$MESSAGE")

          MAX_LEN=2000

          send_message() {
            local msg="$1"
            local payload
            payload=$(jq -n --arg content "$msg" '{content: $content}')
            curl -s -H "Content-Type: application/json" -X POST -d "$payload" "$WEBHOOK_URL"
          }

          split_and_send() {
            local remaining="$1"

            while [ "${#remaining}" -gt "$MAX_LEN" ]; do
              local chunk="${remaining:0:$MAX_LEN}"
              local split_at

              split_at=$(awk -v str="$chunk" '
                BEGIN {
                  pos = 0;
                  for (i = 1; i <= length(str); i++) {
                    if (substr(str, i, 1) == "\n") {
                      pos = i;
                    }
                  }
                  print pos;
                }'
              )

              if [ "$split_at" -eq 0 ]; then
                split_at=$MAX_LEN
              fi

              local part="${remaining:0:$split_at}"
              send_message "$part"
              remaining="${remaining:$split_at}"
            done

            if [ -n "$remaining" ]; then
              send_message "$remaining"
            fi
          }

          split_and_send "$MESSAGE"
